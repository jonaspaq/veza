# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

      - image: circleci/mysql:5.7
        environment:
          - MYSQL_USER=example
          - MYSQL_PASSWORD=example
          - MYSQL_ALLOW_EMPTY_PASSWORD=true
          - MYSQL_DATABASE=example
          # - MYSQL_ROOT_PASSWORD=password

    steps:
      - checkout

      # - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      # - run: sudo docker-php-ext-install zip

      - run:
          name: Install PHP extensions
          command: |
            sudo apt update
            sudo docker-php-ext-install pdo_mysql zip

      # - run:
      #     name: Display versions
      #     command: |
      #       php -v
      #       composer --version

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # NPM Dependencies
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run:
          name: Build assets
          command: yarn run production

        # prepare the database
      - run:
          name: Prepare database
          command: |
            cp .env.example .env
            php artisan key:generate
            php artisan migrate --force
            php artisan passport:install --force
      # - run: cp .env.example .env
      # - run: php artisan key:generate
      # - run: php artisan migrate --force
      # - run: php artisan passport:install --force

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
